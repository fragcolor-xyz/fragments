variables:
  GIT_SUBMODULE_STRATEGY: recursive
  
test:linux:
  script:
    - docker build -t fragments-test --build-arg USER_ID=`id -u` --build-arg GROUP_ID=`id -g` .
    - docker run --rm -t -u`id -u`:`id -g` fragments-test:latest nim cpp --cincludes:. -r fragments/ffi/cpp.nim
    - docker run --rm -t -u`id -u`:`id -g` fragments-test:latest nim c -r fragments/dsl.nim
    - docker run --rm -t -u`id -u`:`id -g` fragments-test:latest nim c --threads:on -r fragments/threading/threading_primitives.nim
    - docker run --rm -t -u`id -u`:`id -g` fragments-test:latest nim c --threads:on -r fragments/threading/atomics.nim
    - docker run --rm -t -u`id -u`:`id -g` fragments-test:latest nim cpp --threads:on -r fragments/threading/atomics.nim
    - docker run --rm -t -u`id -u`:`id -g` fragments-test:latest nim c -r fragments/math/linalg.nim
    - docker run --rm -t -u`id -u`:`id -g` fragments-test:latest nim c -r fragments/math/vectors.nim
    - docker run --rm -t -u`id -u`:`id -g` fragments-test:latest nim c -r fragments/serialization.nim
    - docker run --rm -t -u`id -u`:`id -g` fragments-test:latest nim c -r fragments/seqview.nim
    - docker run --rm -t -u`id -u`:`id -g` fragments-test:latest nim c -r fragments/buildandrun.nim
  tags:
    - DOCKER, LINUX

# test:windows:
#   before_script:
#     - "echo off"
#     - 'call C:\BuildTools\Common7\Tools\VsDevCmd.bat -arch=amd64'
#     - 'call C:\ProgramData\Miniconda3\Scripts\activate.bat C:\ProgramData\Miniconda3'
#   script:
#     - cmd /C conda create -n fragments_testing -c fragcolor nim
#     - IF %errorlevel% NEQ 0 exit /b %errorlevel%
#     - cmd /C conda activate fragments_testing # it seems we need to do this to actually prepare the env properly?
#     - set CONDA_FRAG=C:\ProgramData\Miniconda3\envs\fragments_testing
#     - set PATH=%PATH%;%CONDA_FRAG%\bin
#     - nim cpp --cc:vcc --cincludes:. -r fragments/ffi/cpp.nim
#     - nim c --cc:vcc -r fragments/dsl.nim
#     - nim c --cc:vcc --threads:on -r fragments/threading/threading_primitives.nim
#     - nim c --cc:vcc --threads:on -r fragments/threading/atomics.nim
#     - nim cpp --cc:vcc --threads:on -r fragments/threading/atomics.nim
#     - nim c --cc:vcc -r fragments/math/linalg.nim
#     - nim c --cc:vcc -r fragments/math/vectors.nim
#     - nim c --cc:vcc -r fragments/serialization.nim
#     - nim c --cc:vcc -r fragments/seqview.nim
#     - nim c --cc:vcc -r fragments/buildandrun.nim
#   after_script:
#     # Recycle space - should keep latest pkg on branch
#     - 'call C:\ProgramData\Miniconda3\Scripts\activate.bat C:\ProgramData\Miniconda3'
#     - conda env remove -n fragments_testing
#     - conda clean -y --all
#   tags:
#     - WIN, CONDA

# test:macos:
#   stage: test
#   before_script:
#     - conda env remove -n nim_testing || true
#   script:
#     - export MACOSX_DEPLOYMENT_TARGET=10.13
#     - conda create -n nim_testing -c fragcolor nim
#     - export PATH="$PATH:$HOME/miniconda3/envs/nim_testing/bin"
#     - nim cpp --passC:-std=c++14 --cincludes:. -r fragments/ffi/cpp.nim
#     - nim cpp -o:ios-test fragments/ffi/ios.nim
#     # - xcrun simctl spawn booted ./ios-test
#     - nim c -r fragments/dsl.nim
#     - nim c --threads:on -r fragments/threading/threading_primitives.nim
#     - nim c --threads:on -r fragments/threading/atomics.nim
#     - nim cpp --threads:on -r fragments/threading/atomics.nim
#     - nim c -r fragments/math/linalg.nim
#     - nim c -r fragments/math/vectors.nim
#     - nim c -r fragments/serialization.nim
#     - nim c -r fragments/seqview.nim
#     - nim c -r fragments/buildandrun.nim
#   tags:
#     - MACOS, CONDA
